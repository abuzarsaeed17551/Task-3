{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 737
        },
        "id": "Hr-A79PNkc1M",
        "outputId": "37f80bfc-11d0-4a4f-d47d-8758581b8e23"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-732db4cc-0412-40bb-8ef2-8386fd67f38c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-732db4cc-0412-40bb-8ef2-8386fd67f38c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving heart.csv to heart (1).csv\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'Logistic Regression': {'Accuracy': 0.8032786885245902,\n",
              "  'AUC': np.float64(0.8690476190476191),\n",
              "  'Classification Report': '              precision    recall  f1-score   support\\n\\n           0     0.8636    0.6786    0.7600        28\\n           1     0.7692    0.9091    0.8333        33\\n\\n    accuracy                         0.8033        61\\n   macro avg     0.8164    0.7938    0.7967        61\\nweighted avg     0.8126    0.8033    0.7997        61\\n',\n",
              "  'Confusion Matrix': array([[19,  9],\n",
              "         [ 3, 30]]),\n",
              "  'Top Features':     feature      coef  abs_coef\n",
              "  2        cp  0.937908  0.937908\n",
              "  1       sex -0.713246  0.713246\n",
              "  12     thal -0.622097  0.622097\n",
              "  9   oldpeak -0.595675  0.595675\n",
              "  11       ca -0.559981  0.559981\n",
              "  7   thalach  0.540569  0.540569\n",
              "  8     exang -0.476188  0.476188\n",
              "  4      chol -0.459278  0.459278\n",
              "  10    slope  0.307741  0.307741\n",
              "  6   restecg  0.236065  0.236065},\n",
              " 'Decision Tree': {'Accuracy': 0.7049180327868853,\n",
              "  'AUC': np.float64(0.6975108225108225),\n",
              "  'Classification Report': '              precision    recall  f1-score   support\\n\\n           0     0.7083    0.6071    0.6538        28\\n           1     0.7027    0.7879    0.7429        33\\n\\n    accuracy                         0.7049        61\\n   macro avg     0.7055    0.6975    0.6984        61\\nweighted avg     0.7053    0.7049    0.7020        61\\n',\n",
              "  'Confusion Matrix': array([[17, 11],\n",
              "         [ 7, 26]]),\n",
              "  'Top Features':      feature  importance\n",
              "  2         cp    0.295789\n",
              "  9    oldpeak    0.127616\n",
              "  4       chol    0.099702\n",
              "  7    thalach    0.092691\n",
              "  12      thal    0.089397\n",
              "  0        age    0.066914\n",
              "  1        sex    0.065097\n",
              "  10     slope    0.046729\n",
              "  3   trestbps    0.041109\n",
              "  11        ca    0.038156}}"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.metrics import accuracy_score, roc_curve, auc, confusion_matrix, classification_report\n",
        "\n",
        "\n",
        "# If it's a CSV, load it into Pandas\n",
        "import pandas as pd\n",
        "\n",
        "# Replace 'your_file.csv' with the uploaded file name\n",
        "\n",
        "df = pd.read_csv(\"heart.csv\")\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# Target and features\n",
        "target_col = 'target'\n",
        "y = df[target_col]\n",
        "X = df.drop(columns=[target_col])\n",
        "\n",
        "# Numeric & categorical features\n",
        "numeric_cols = X.select_dtypes(include=['int64','float64']).columns.tolist()\n",
        "cat_cols = X.select_dtypes(include=['object']).columns.tolist()\n",
        "\n",
        "# Preprocessing\n",
        "numeric_transformer = Pipeline([\n",
        "    ('imputer', SimpleImputer(strategy='median')),\n",
        "    ('scaler', StandardScaler())\n",
        "])\n",
        "categorical_transformer = Pipeline([\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))\n",
        "])\n",
        "preprocessor = ColumnTransformer([\n",
        "    ('num', numeric_transformer, numeric_cols),\n",
        "    ('cat', categorical_transformer, cat_cols)\n",
        "])\n",
        "\n",
        "# Train-test split\n",
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.2, stratify=y, random_state=42\n",
        ")\n",
        "\n",
        "# Logistic Regression\n",
        "log_pipeline = Pipeline([\n",
        "    ('preproc', preprocessor),\n",
        "    ('clf', LogisticRegression(max_iter=1000, solver='liblinear'))\n",
        "])\n",
        "log_pipeline.fit(X_train, y_train)\n",
        "y_pred_log = log_pipeline.predict(X_test)\n",
        "y_proba_log = log_pipeline.predict_proba(X_test)[:,1]\n",
        "\n",
        "# Decision Tree\n",
        "tree_pipeline = Pipeline([\n",
        "    ('preproc', preprocessor),\n",
        "    ('clf', DecisionTreeClassifier(random_state=42))\n",
        "])\n",
        "tree_pipeline.fit(X_train, y_train)\n",
        "y_pred_tree = tree_pipeline.predict(X_test)\n",
        "y_proba_tree = tree_pipeline.predict_proba(X_test)[:,1]\n",
        "\n",
        "# Evaluation function\n",
        "def evaluate_model(name, y_true, y_pred, y_proba):\n",
        "    acc = accuracy_score(y_true, y_pred)\n",
        "    report = classification_report(y_true, y_pred, digits=4)\n",
        "    cm = confusion_matrix(y_true, y_pred)\n",
        "    fpr, tpr, _ = roc_curve(y_true, y_proba)\n",
        "    roc_auc = auc(fpr, tpr)\n",
        "    return acc, report, cm, roc_auc\n",
        "\n",
        "# Evaluate Logistic Regression\n",
        "log_acc, log_report, log_cm, log_auc = evaluate_model(\"Logistic Regression\", y_test, y_pred_log, y_proba_log)\n",
        "# Evaluate Decision Tree\n",
        "tree_acc, tree_report, tree_cm, tree_auc = evaluate_model(\"Decision Tree\", y_test, y_pred_tree, y_proba_tree)\n",
        "\n",
        "# Feature importance - Logistic Regression\n",
        "preproc = log_pipeline.named_steps['preproc']\n",
        "feature_names = numeric_cols.copy()\n",
        "if cat_cols:\n",
        "    ohe = preproc.named_transformers_['cat'].named_steps['onehot']\n",
        "    feature_names.extend(ohe.get_feature_names_out(cat_cols))\n",
        "coefs = log_pipeline.named_steps['clf'].coef_.ravel()\n",
        "coef_df = pd.DataFrame({'feature': feature_names, 'coef': coefs, 'abs_coef': np.abs(coefs)})\n",
        "coef_df = coef_df.sort_values('abs_coef', ascending=False)\n",
        "\n",
        "# Feature importance - Decision Tree\n",
        "tree_feature_names = numeric_cols.copy()\n",
        "if cat_cols:\n",
        "    ohe_tree = tree_pipeline.named_steps['preproc'].named_transformers_['cat'].named_steps['onehot']\n",
        "    tree_feature_names.extend(ohe_tree.get_feature_names_out(cat_cols))\n",
        "importances = tree_pipeline.named_steps['clf'].feature_importances_\n",
        "tree_df = pd.DataFrame({'feature': tree_feature_names, 'importance': importances})\n",
        "tree_df = tree_df.sort_values('importance', ascending=False)\n",
        "\n",
        "# Output\n",
        "results = {\n",
        "    \"Logistic Regression\": {\n",
        "        \"Accuracy\": log_acc,\n",
        "        \"AUC\": log_auc,\n",
        "        \"Classification Report\": log_report,\n",
        "        \"Confusion Matrix\": log_cm,\n",
        "        \"Top Features\": coef_df.head(10)\n",
        "    },\n",
        "    \"Decision Tree\": {\n",
        "        \"Accuracy\": tree_acc,\n",
        "        \"AUC\": tree_auc,\n",
        "        \"Classification Report\": tree_report,\n",
        "        \"Confusion Matrix\": tree_cm,\n",
        "        \"Top Features\": tree_df.head(10)\n",
        "    }\n",
        "}\n",
        "\n",
        "results\n",
        "\n"
      ]
    }
  ]
}
